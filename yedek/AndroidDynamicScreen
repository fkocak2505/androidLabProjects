====== AVANTAJ =======

1-) Mobil Projelerdeki (Android için) maliyet düşecek. (Adam Gün hesabı)
2-) Developer' ın (Örnek yeni mezun birinin) ekran geliştirmek için XML Layout yapısını bilmesine gerek kalmayacak.
3-) Çok yönlü olacak.
	--> Direk ekranlar da oluşturabiliriz.
	--> Gelen data üzerinden dinamik XML' lerde oluşturabiliriz.
4-) Şirket içi Android projelerde bu yapı kullanılarak daha az maliyetle iş yapılmış olacak
**** 5-) Bir jar, Android için aar haline getirip library olarak yayına alabiliriz. (Fakat stable olana kadar riskli bir durum.) 
		 
		 (Nexus gibi bir repoda tutulabilecek mi? araştırılacak...)

6-) Eğer böyle bir library üretebilirsek çok güzel bir Ar-Ge projesi olur. 


====== DEZAVANTAJ ======

1-) Şuanki projelerde (ÇSGB ve UETS) kullanmak çok riskli
2-) Stable hale getirene kadar sistem çok kırılgan
**** 3-) Yaklaşık olarak 6 7 çeşit layout türü var. Her component farklı layoutlarda farklı davranabiliyor. (Custom Layoutlar yaratıp Layout Extend edilerek yazılması lazım.. İlk akla gelen çözüm..)

**** 4-) Yapılmak istenilen dinamik bir component' ın bazı özelliklerinde sürüm eksikliği olması ve Rest API' yi yazan kişinin bunu bilmemesi.. (Abstract Class bazlı kendi componentlarımızı yazmamız gerekecek... İlk akla gelen çözüm..)

NOT: Statik XML içerisinde bu özelliği kullanmaya çalışınca crash olmuyor. Fakat programatik bir şekilde bu özelliği verdiğimizda uygulamalar crash olabiliyor.

5-) Tüm componentların tüm feature' larını incelemek ve test etmek gerekecek. Uzun bir süre alacaktır.
6-) Yaptığımız library' nin düzenli aralıkla test edilip, test raporlarını alabilmemiz için bir altyapı kurmamız gerekecek.
	NOT: 1. Adım: Örneğin AWS Device Farm ile application' ı test edip bunun raporlarını manuel olarak alabiliriz. (Haftalık, aylık ya da crash olduğu anda);
		 2. Adım: Manuel olarak aldığımız raporları otomatize nasıl ederiz? (Bunun için Örnek verilirse AWS Device Farm kullanıyoruz diyelim. AWS NodeJS SDK' sını inceleyip bir servis yazmaya çalışacağım)
    6. Madde ve Not 1 ve 2 için ayrılması gereken bir süre olup bunun planlanmasının yapılması gerekecek.
7-) Dinamik ekran datalar için gerekli tüm feature' lar sağlanmalıdır..

====== ÖNERİ ======

1-) Dinamik Ekran oluşturma ÇSGB ve UETS projelerinde uygulanmamalı. Riskimiz çok fazla.
2-) Kullanıcıya sadece tek bir yol sunmak iyi bir fikir değil. Birden fazla yol sunulup kullanılabilirliği arttırmak gerekecek.
	Örnek olarak 2. Madde ile ilgili Öneriler şunlar olabilir:

	A-) Sistem kullanıcıya hiç XML göstermeden gelen datayı alıp bu datalar üzerinden ekran oluşturabilmelidir. Developer ise oluşturulan component' lara aksiyon takabilmeli. 
		(Button Click Özelliğini yazmak vb.) 
	
	B-) Sistem gelen datayı alıp dinamik bir xml oluşturup bunu res/layout klasörüne developer' ın istediği isimde oluşturmalıdır. Kullanıcı isterse XML üzerinden kendine özgü 		değişiklikler yapabilmelidir. 

	Öneri İle ilgili Sonuç:
	1. Sonuç: A maddesinin maliyeti B maddesine göre daha düşük ama B maddesine göre esnek olmayan bir yapı
	2. SOnuç: B maddesinin maliyeti A maddesine göre biraz daha fazla ama A maddesine göre daha esnek bir yapı.
